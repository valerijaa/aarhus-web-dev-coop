@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using Umbraco.Web


@*
    This snippet displays a list of links of the pages immediately under the top-most page in the content tree.
    This is the home page for a standard website.
    It also highlights the current active page/section in the navigation with the CSS class "current".
*@

@{ 
    var root = Model.Content.Root();
    var selection = root.Children.Where(x => x.IsVisible()).ToArray();
}

 <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="@root.Url">@root.Name</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
           @if (selection.Length > 0)
            {
            <ul class="navbar-nav">
                @foreach (var item in selection)
                {
                    var listItemClass = item.IsAncestorOrSelf(Model.Content) ? "active" : null;
                    if (item.IsDocumentType("projectsOverview"))
                    {
                        var projects = item
                            .Children()
                            .Where(x =>
                                x.IsVisible()
                                && x.HasValue("projectStatus")
                                && x.GetProperty("projectStatus").Value<string>() == "Completed"
                            )
                            .OrderByDescending(x => x.CreateDate);

                        <li class="nav-item dropdown @listItemClass">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @item.Name
                            </a>
                            @ShowDropDownItems(projects)
                        </li>
                    }
                    else if (item.IsDocumentType("articlesOverview"))
                    {
                        var articles = item
                            .Children()
                            .OrderByDescending(x => x.CreateDate);
                        <li class="nav-item dropdown @listItemClass">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @item.Name
                            </a>
                            @ShowDropDownItems(articles)
                        </li>
                    }
                    else
                    {
                        <li class="nav-item @listItemClass">
                            <a class="nav-link" href="@item.Url">@item.Name</a>
                        </li>
                    }
                }
            </ul>
            }
        </div>
    </nav>

@helper ShowDropDownItems(IEnumerable<IPublishedContent> items) { 
     <div class="dropdown-menu" aria-labelledby="navbarDropdown">
         @foreach (var item in items)
         {
             <a class="dropdown-item" href="@item.Url">@item.Name</a>
         }
     </div>
}